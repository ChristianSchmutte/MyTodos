/* eslint-disable no-param-reassign */

import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  fetchAllLists,
  addList,
  deleteList,
  addSection,
  deleteSection,
  addTask,
} from './allListsAPI';

const initialState = {
  lists: [],
  status: 'idle',
  currentList: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(fetchAllListsAsync())`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchAllListsAsync = createAsyncThunk(
  'allLists/fetchAllLists',
  // The value we return becomes the `fulfilled` action payload
  async () => fetchAllLists(),
);

export const addListAsync = createAsyncThunk(
  'allLists/addList',
  // The value we return becomes the `fulfilled` action payload
  async (title) => addList(title),
);

export const deleteListAsync = createAsyncThunk(
  'allLists/deleteList',
  // The value we return becomes the `fulfilled` action payload
  async (listId) => deleteList(listId),
);

export const addSectionAsync = createAsyncThunk(
  'allLists/addSection',
  // The value we return becomes the `fulfilled` action payload
  async ({ title, listId }) => addSection({ title, listId }),
);

export const deleteSectionAsync = createAsyncThunk(
  'allLists/deleteSection',
  // The value we return becomes the `fulfilled` action payload
  async ({ sectionId, listId }) => deleteSection({ sectionId, listId }),
);

export const addTaskAsync = createAsyncThunk(
  'allLists/addTask',
  // The value we return becomes the `fulfilled` action payload
  async ({ title, listId, sectionId }) => addTask({ title, listId, sectionId }),
);

export const allListsSlice = createSlice({
  name: 'allLists',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    showList: (state, action) => {
      state.currentList = state.lists.find((list) => list._id === action.payload);
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllListsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchAllListsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.lists = action.payload;
        [state.currentList] = action.payload;
      })
      .addCase(addListAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addListAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.lists = action.payload;
      })
      .addCase(deleteListAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteListAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.lists = action.payload;
        [state.currentList] = action.payload;
      })
      .addCase(addSectionAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addSectionAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.lists = action.payload;
        state.currentList = state.lists.find((list) => list._id === state.currentList._id);
      })
      .addCase(deleteSectionAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteSectionAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.lists = action.payload;
        state.currentList = state.lists.find((list) => list._id === state.currentList._id);
      })
      .addCase(addTaskAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addTaskAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.lists = action.payload;
        state.currentList = state.lists.find((list) => list._id === state.currentList._id);
      });
  },
});

export const { increment, decrement, showList } = allListsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectLists = (state) => state.allLists.lists;
export const selectStatus = (state) => state.allLists.status;
export const selectCurrentList = (state) => state.allLists.currentList;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectLists(getState());
  if (currentValue % 2 === 1) {
    dispatch(increment(amount));
  }
};

export default allListsSlice.reducer;
